QUESTION 1:
----------------------------------------------------------------

QUESTION 2:
SQL> DECLARE
  2      input_number NUMBER;
  3      is_prime BOOLEAN := TRUE;
  4  BEGIN
  5      -- Take user input
  6      DBMS_OUTPUT.PUT_LINE('Enter a number:');
  7      input_number := &number;
  8
  9      -- Check if the number is less than 2
 10      IF input_number < 2 THEN
 11          is_prime := FALSE;
 12      ELSE
 13          FOR i IN 2..FLOOR(SQRT(input_number)) LOOP
 14              IF MOD(input_number, i) = 0 THEN
 15                  is_prime := FALSE;
 16                  EXIT; -- No need to check further
 17              END IF;
 18          END LOOP;
 19      END IF;
 20
 21      -- Output the result
 22      IF is_prime THEN
 23          DBMS_OUTPUT.PUT_LINE(input_number || ' is a prime number.');
 24      ELSE
 25          DBMS_OUTPUT.PUT_LINE(input_number || ' is not a prime number.');
 26      END IF;
 27  END;
 28  /
Enter value for number: 13
old   7:     input_number := &number;
new   7:     input_number := 13;
Enter a number:
13 is a prime number.

---------------------------------------------------------------------

QUESTION 3:
SQL> DECLARE
  2      input_number NUMBER;
  3      original_number NUMBER;
  4      reversed_number NUMBER := 0;
  5      digit NUMBER;
  6  BEGIN
  7      -- Take user input
  8      DBMS_OUTPUT.PUT_LINE('Enter a number:');
  9      input_number := &number;
 10
 11      original_number := input_number;
 12
 13      -- Reverse the number
 14      WHILE input_number > 0 LOOP
 15          digit := MOD(input_number, 10);
 16          reversed_number := reversed_number * 10 + digit;
 17          input_number := FLOOR(input_number / 10);
 18      END LOOP;
 19
 20      -- Output the result
 21      IF original_number = reversed_number THEN
 22          DBMS_OUTPUT.PUT_LINE(original_number || ' is a palindrome.');
 23      ELSE
 24          DBMS_OUTPUT.PUT_LINE(original_number || ' is not a palindrome.');
 25      END IF;
 26  END;
 27  /
Enter value for number: 121
old   9:     input_number := &number;
new   9:     input_number := 121;
Enter a number:
121 is a palindrome.

----------------------------------------------------------------------
QUESTION 4:

SQL> DECLARE
  2      input_number NUMBER;
  3      factorial NUMBER := 1;
  4  BEGIN
  5      -- Take user input
  6      DBMS_OUTPUT.PUT_LINE('Enter a number:');
  7      input_number := &number;
  8
  9      -- Calculate factorial
 10      IF input_number < 0 THEN
 11          DBMS_OUTPUT.PUT_LINE('Factorial is not defined for negative numbers.');
 12      ELSE
 13          FOR i IN 1..input_number LOOP
 14              factorial := factorial * i;
 15          END LOOP;
 16
 17          -- Output the result
 18          DBMS_OUTPUT.PUT_LINE('Factorial of ' || input_number || ' is ' || factorial);
 19      END IF;
 20  END;
 21  /
Enter value for number: 5
old   7:     input_number := &number;
new   7:     input_number := 5;
Enter a number:
Factorial of 5 is 120

------------------------------------------------------------------- 
QUESTION 5:

SQL> DECLARE
  2      input_number NUMBER;
  3      first NUMBER := 0;
  4      second NUMBER := 1;
  5      next NUMBER;
  6  BEGIN
  7      -- Take user input
  8      DBMS_OUTPUT.PUT_LINE('Enter the number of terms in Fibonacci series:');
  9      input_number := &number;
 10
 11      DBMS_OUTPUT.PUT_LINE('Fibonacci Series:');
 12
 13      FOR i IN 1..input_number LOOP
 14          IF i = 1 THEN
 15              DBMS_OUTPUT.PUT_LINE(first);
 16          ELSIF i = 2 THEN
 17              DBMS_OUTPUT.PUT_LINE(second);
 18          ELSE
 19              next := first + second;
 20              DBMS_OUTPUT.PUT_LINE(next);
 21              first := second;
 22              second := next;
 23          END IF;
 24      END LOOP;
 25  END;
 26  /
Enter value for number: 5
old   9:     input_number := &number;
new   9:     input_number := 5;
Enter the number of terms in Fibonacci series:
Fibonacci Series:
0
1
1
2
3

--------------------------------------------------------------------
QUESTION 6:

SQL> DECLARE
  2      sum_of_natural_numbers NUMBER := 0;
  3      i NUMBER;
  4  BEGIN
  5      -- Calculate the sum of the first ten natural numbers
  6      FOR i IN 1..10 LOOP
  7          sum_of_natural_numbers := sum_of_natural_numbers + i;
  8      END LOOP;
  9
 10      -- Output the result
 11      DBMS_OUTPUT.PUT_LINE('Sum of the first ten natural numbers is: ' || sum_of_natural_numbers);
 12  END;
 13  /
Sum of the first ten natural numbers is: 55

------------------------------------------------------------------------
QUESTION 7:
DECLARE
  2      radius        NUMBER;
  3      area          NUMBER;
  4      perimeter     NUMBER;
  5      pi            CONSTANT NUMBER := 3.14159; -- Approximation of Pi
  6  BEGIN
  7      radius := &radius; -- Example radius value
  8      -- Calculate area and perimeter
  9      area := pi * radius * radius;
 10      perimeter := 2 * pi * radius;
 11      -- Output the results
 12      DBMS_OUTPUT.PUT_LINE('Radius: ' || radius);
 13      DBMS_OUTPUT.PUT_LINE('Area: ' || area);
 14      DBMS_OUTPUT.PUT_LINE('Perimeter (Circumference): ' || perimeter);
 15  END;
 16  /

-- Output of the program

Enter value for radius: 5
old   7:     radius := &radius; -- Example radius value
new   7:     radius := 5; -- Example radius value
Radius: 5
Area: 78.53975
Perimeter (Circumference): 31.4159
--------------------------------------------------------------------------------------------------------------------------------
QUESTION 8:

  DECLARE
      num1       NUMBER;
      num2       NUMBER;
      num3       NUMBER;
      greatest    NUMBER;
  BEGIN
      -- Input numbers
      num1 := &num1;  -- Prompts for first number
      num2 := &num2;  -- Prompts for second number
      num3 := &num3;  -- Prompts for third number
  
      -- Compare the three numbers to find the greatest
      IF (num1 >= num2) AND (num1 >= num3) THEN
          greatest := num1;
      ELSIF (num2 >= num1) AND (num2 >= num3) THEN
          greatest := num2;
      ELSE
          greatest := num3;
      END IF;
  
      -- Output the greatest number
      DBMS_OUTPUT.PUT_LINE('The greatest number is: ' || greatest);
  END;
  /

-- OUTPUT OF THE PROGRAM
Enter value for num1: 13
old   8:     num1 := &num1;  -- Prompts for first number
new   8:     num1 := 13;  -- Prompts for first number
Enter value for num2: 15
old   9:     num2 := &num2;  -- Prompts for second number
new   9:     num2 := 15;  -- Prompts for second number
Enter value for num3: 20
old  10:     num3 := &num3;  -- Prompts for third number
new  10:     num3 := 20;  -- Prompts for third number
The greatest number is: 20
----------------------------------------------------------------------------------------------------------------------------------------
QUESTION 9:

DECLARE
    num      NUMBER;
    result   VARCHAR2(10);
BEGIN
    -- Input number
    num := &num;  -- Prompts for the number

    -- Check if the number is odd or even
    IF MOD(num, 2) = 0 THEN
        result := 'Even';
    ELSE
        result := 'Odd';
    END IF;

    -- Output the result
    DBMS_OUTPUT.PUT_LINE('The number ' || num || ' is ' || result || '.');
END;
/

-- OUTPUT OF THE PROGRAM
Enter value for num: 23
old   6:     num := &num;  -- Prompts for the number
new   6:     num := 23;  -- Prompts for the number
The number 23 is Odd.

Enter value for num: 24
old   6:     num := &num;  -- Prompts for the number
new   6:     num := 24;  -- Prompts for the number
The number 24 is Even.
----------------------------------------------------------------------------------------------------------------------------------------
QUESTION 10:

DECLARE
    num1      NUMBER;
    num2      NUMBER;
    num3      NUMBER;
    temp      NUMBER;
BEGIN
    -- Input numbers
    num1 := &num1;  -- Prompts for first number
    num2 := &num2;  -- Prompts for second number
    num3 := &num3;  -- Prompts for third number

    -- Sort the numbers in ascending order using a simple comparison method
    IF num1 > num2 THEN
        temp := num1;
        num1 := num2;
        num2 := temp;
    END IF;

    IF num1 > num3 THEN
        temp := num1;
        num1 := num3;
        num3 := temp;
    END IF;

    IF num2 > num3 THEN
        temp := num2;
        num2 := num3;
        num3 := temp;
    END IF;

    -- Output the numbers in ascending order
    DBMS_OUTPUT.PUT_LINE('Numbers in ascending order: ' || num1 || ', ' || num2 || ', ' || num3);
END;
/

-- OUTPUT OF THE PROGRAM
Enter value for num1: 12
old   8:     num1 := &num1;  -- Prompts for first number
new   8:     num1 := 12;  -- Prompts for first number
Enter value for num2: 13
old   9:     num2 := &num2;  -- Prompts for second number
new   9:     num2 := 13;  -- Prompts for second number
Enter value for num3: 14
old  10:     num3 := &num3;  -- Prompts for third number
new  10:     num3 := 14;  -- Prompts for third number
Numbers in ascending order: 12, 13, 14
-------------------------------------------------------------------------------------------------------------------------------------
QUESTION 11:
create table Emp(ename varchar2(15),ecity varchar2(15),salary number(10,2),enumber number, PRIMARY KEY(enumber), eaddress varchar(30), deptname varchar(20));
insert into emp values('John','Delhi',20000,1,'Sarita Vihar, Delhi', 'IT');
insert into emp values('Hope','Gurgaon',45000,2,'Sector 49, Gurgaon', 'Technical');
insert into emp values('Mark','Faridabad',60000,3,'Sector 16, Faridabad', 'HR');

create table Company(cname varchar2(15),ccity varchar2(15),empnumber number);


a) create view empdata as select ename,ecity from emp;
b) update empdata set ecity='Delhi' where ename='John';
c) CREATE  VIEW emp_company AS  SELECT enumber, ename, ecity, salary, eaddress, deptname, cname, ccity FROM Emp LEFT JOIN  Company ON enumber = empnumber;
d) 
